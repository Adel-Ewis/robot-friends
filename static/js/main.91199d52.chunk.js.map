{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","name","email","id","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchField","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","hasError","info","this","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","App","onRequestRobots","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","response","json","data","intialStateSearch","intialStateRobots","rootReducer","createLogger","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.91199d52.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='bg-light-green dib br3 pa3 ma2  grow bw2 shadow-5 tc'>\r\n      <img src={`https://robohash.org/${id}?size=200x200`} alt='robots' />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p> {email} </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Card;\r\n","import React from 'react';\r\nimport './cardList.css';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {robots.map((user, i) => {\r\n        return <Card key={i} id={user.id} name={user.name} email={user.email} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchField, searchChange}) => {\r\n  return (\r\n    <div className= 'pa2 '>\r\n      <input\r\n      aria-label= 'search robots'\r\n      className='pa3 ba ba-green bg-lightest-blue'\r\n       type='search' id='input' placeholder='search robots' onChange={searchChange} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return <div style={{ overflowY: 'scroll', border: '5px solid black', height: '800px' }}>{props.children}</div>;\r\n};\r\n\r\nexport default Scroll;\r\n\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    };\r\n  }\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n  render() {\r\n    return this.state.hasError ? <h1>Ooooops something is not good</h1> : this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React, { Component } from 'react';\r\n\r\nexport default class CounterButton extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      count: 0\r\n    };\r\n  }\r\n\r\n  updateCount = () => {\r\n    this.setState((state) => {\r\n      return { count: state.count + 1 };\r\n    });\r\n  };\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (this.state.count !== nextProps.count) return true;\r\n    return false;\r\n  }\r\n  render() {\r\n    console.log('CounterButton');\r\n    return (\r\n      <div>\r\n        <button color={this.props.color} onClick={this.updateCount}>\r\n          Count: {this.state.count}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nexport default class Header extends Component {\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return false;\r\n  }\r\n  render() {\r\n    console.log('Header');\r\n    return (\r\n      <div>\r\n        <h1 className='f2'>RoboFriends</h1>\r\n        <CounterButton color={'red'} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './app.css';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport { setSearchField, requestRobots } from '../actions';\r\nimport { connect } from 'react-redux';\r\nimport Header from '../components/Header';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error,\r\n    robots: state.requestRobots.robots\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  };\r\n};\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const { searchField, onSearchChange, robots, isPending } = this.props;\r\n    const filteredRobots = robots.filter((robot) => robot.name.toLowerCase().includes(searchField.toLowerCase()));\r\n    return isPending ? (\r\n      <h1 className='tc'>Loading</h1>\r\n    ) : (\r\n      <div className='tc'>\r\n        <Header />\r\n        <SearchBox searchField={searchField} searchChange={onSearchChange} />\r\n        <Scroll>\r\n          <ErrorBoundry>\r\n            <CardList robots={filteredRobots} />\r\n          </ErrorBoundry>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_FAILED,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_PENDING\r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then((response) => response.json())\r\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch((error) => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\r\n};\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_FAILED,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_PENDING\r\n} from './constants';\r\nconst intialStateSearch = {\r\n  searchField: ''\r\n};\r\n\r\nexport const searchRobots = (state = intialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst intialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: ''\r\n};\r\n\r\nexport const requestRobots = (state = intialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, { robots: action.payload, isPending: false });\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, { error: action.payload, isPending: false });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport App from './containers/App';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { searchRobots, requestRobots } from './reducers';\r\nimport thunk from 'redux-thunk';\r\nimport { createLogger } from 'redux-logger';\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\r\n// const store = createStore(rootReducer, applyMiddleware(thunk, logger));\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}